{"pages":[{"title":"Categories","text":"","link":"/categories/index.html"},{"title":"About","text":"I’m a software developer who likes to tweak/break gadgets and complain about everything under the sun. When I’m not doing that, I’m usually playing games, watching films or watching sports.","link":"/about/index.html"},{"title":"Experience","text":"Morgan StanleySoftware Developer - Trade Capture &amp; Lifecycle ManagementHaving been made redundant at Veritas due to them closing the office in Reading, I then went to join Morgan Stanley. At Morgan Stanley, I was brought in to work as part of a new agile squad tasked to re-write the trade capture and lifecycle management system. A vast, monolithic application that had been mainly developed between 2007 and 2009, it is very complex with a mixture of Scala and Java with a lot of proprietary, unsupported transport libraries (for example, requiring to use an Eclipse based tool just to create the POJOs from which the source code no longer exists). With a set of UIs written in a mixture of C# and AngularJS, persistence in DB2 and Sybase and internal technologies such as CPS, which is an internal queue. As part of this gradual re-write, I have brought in more modern technologies such as Apache Kafka, green/blue deployments and continuous integration and deployment. VeritasSenior Software Developer - InfoMapMy role at Veritas consisted of designing and developing a highly available distributed system to process the metadata of billions of files, so they can be viewed in a graphical web UI, filtered, exported into different formats for further processing elsewhere and extensible to be consumed by new services to use the data in new products. The technology stack was Java 8, Apache Spark, Cassandra, Elasticsearch, JanusGraph, PostgreSQL and Kubernetes, deployed across AWS and Azure platforms. I have also brought in a new process to improve the automated workflow to production, by introducing better testing techniques, better CI/CD processes and making it possible to deploy to pre-production as soon as a feature has been completed (i.e. after a pull request has been approved and merged, built, tested and deployed to the different environments). On the non-technical side, my role involved a lot of mentoring of other more junior level developers and running lunch time brown bag sessions to improve the knowledge share of the different technologies and techniques I had been bringing into the team and department. BSkyBSoftware Developer - SearchMy first project in my new role was working on a CMS for the set top box, allowing for the details (such as the image and title) on the home page to be scheduled and changed. This was our first project that was highly available and worked seamlessly across our data centres. Whilst I had some help by a couple of the other developers, this was mainly developed by myself, which was an interesting change after working for so long really closely with other members of the team. This project was written in Java, using Grizzly and Jersey for the back end and APIs, whilst the user interface was developed using GWT. Due to all of the changes that I had made as an associate software developer and becoming an integral leader of the team, I was given a promotion. The promotion meant that I would have the same responsibilities from before, but also to help on the team management side, such as recruitment and meetings with managers at a higher level when my manager was away. Associate Software Developer - SearchAfter completing the academy, I chose to join the search team. In comparison to a lot of other teams in BSkyB, it was a small development team, but with a lot of different projects to maintain. This allowed me to use quite a few different technologies and use them in different circumstances with a lot of challenges. Within the search team, I managed to make an instant impact, but slowly bringing in all of the new skills that I had learnt from the academy. This ranged from non-technical processes, such as making sure we had regular retrospectives, had pre-planning sessions as well as planning sessions and started having workshops, to technical changes, such as better test coverage and improving the current tests. Associate Software Developer - Software Engineer AcademyAs an associate software developer at BSkyB, I worked as part of an agile team of 4 developing an in-house system using Ruby (Sinatra), Cassandra, an in-house variant of Cloud Foundry and Jenkins for continuous deployment (which were all setup by me within the team). It was also agreed to complete the project using Test Driven Development with tools such as Watir/Selenium/WebDriver, Cucumber and Test::Unit. The reason for using these technologies were because none of us had used any of these and we felt that as we had the opportunity to use any technology we wanted, we would try and learn as much as we could. A key part to the development process is that we all develop as part of a pair so that the code we produce is not only of a better quality, but the solution to the problems that arise are better and are future proof. As part of the personal development of the team, we rotated the role of Scrum Master every sprint, so that everyone could gain continual experience in that role. After a month of working, an apprentice (18 year old who had just finished A-levels) was put into the team for us to pass on our skills and to help them with their personal development. As an extra learning scheme, I have been attending brown bag sessions on Node.js and how it works within the company. This has been very useful as it has allowed me to learn another language that is becoming very popular, especially for saving resources on web servers. Half way through the 6 month academy process, I switched to one of the other graduate teams. In this new team, they had already decided to use Grails with MySQL. When I joined, I also introduced the use of Jenkins for building and deploying the project, Cloud Foundry as a way of deploying the project and Cucumber with Geb, which were all technologies that I had learnt in my previous team. OpenGIAs part of my Computer Science degree, I had to get a relevant job placement for a year. For this year, I worked at OpenGI. This was the first time that I had to take an interview with more than just meeting people and being asked questions. At OpenGI, my main job was as a web developer, working on the current insurance broker web sites and creating new ones. I also had to create a few tools and web services to integrate with the other web sites and other systems around the company. For three weeks, whilst one of the team leaders were on holiday, I was given the opportunity to be the temporary team leader. This involved scheduling the work load for the three weeks and corresponding with the other departments. OPPAfter completing my A-levels, I decided that I would need a break from academia, so I applied for university with a deferred placement, allowing me to have a gap year. For my first job, I was a temporary employee at OPP for a week, to help with their project of migrating their old site to their new one, as they had fallen behind. Like with Electrocomponents PLC, I was asked to carry on for another week. My task at OPP mainly consisted of creating new views to work with the new site and then copying the relevant content from the old pages to the new view that I had created. While this wasn’t as exciting as the job at Electrocomponents PLC, I did learn a lot about how site migration works and how other companies work. Electrocomponents PLCI worked at Electrocomponents PLC on and off for two years, between 2004 and 2006. It started as a week for my GCSE work placement. As I had done so well, I was asked to come back for a week during the Christmas period, when they would be short of staff. I was then asked to come back again for the summer of 2005, for the same reason as before, but this time it was for a month. In 2006 I started my A-levels and as part of that, had to spend half-a-day a week, for a year at Electrocomponents PLC. During my time at Electrocomponents PLC, my task was to create different sections of their globalintranet site. This involved not only creating web pages, but also communicating with memebers of staff in other countries as well, such as in Germany or Japan. I also had to teach the managers in other departments how to add new articles and information to the site. If you wish to enquire about some of my work or simply get in touch, please feel free to contact me.","link":"/experience/index.html"},{"title":"Non-Technical Skills","text":"As with most people, my skills go beyond the technical world. However, these can be hard to demonstrate on a website. A lot of these skills I have picked up whilst working at BSkyB. ##Test Driven DevelopmentThe main skill that I have learnt since working at BSkyB is test driven development. This is not to say I had never learnt this whilst at university, but rather I had never understood how useful it really is. For all of our projects, we strictly develop our tests before writing any code. The first series of tests are unit tests, which are there to test specific bits of code that are broken into blocks as small as possible. These are required so that if any functionality does not work, it is easier to find exactly which code is broken, assuming that the tests are well written. An example for a web system would be to check if when a button is clicked, an alert dialog box is displayed. The second series of tests are integration tests, which are there to test the interaction of the different units of the code. This is so that when one bit of code calls another bit of code to complete a usable function, it is tested to work. An example of this on a web system would be to see if when clicking on a button, an alert dialog box appears and then the page submits to another page successfully. The final series of tests are the behaviour driven tests. These are tests that run through the system from a users persepective and how they would use the system. For example, on a web based system, a behaviour driven test may check to see if a user can log in to the site. ##Agile PrinciplesA great set of skills that I have learnt at BSkyB are the agile principles. The main form of agile being used is scrum. While this is well used and what most people use, for the project that I am currently on, we are trying out an evolved version of scrum with kanban, to try and deliver updates as quickly as possible. This has proved to be quite difficult in terms of planning and communication, but it is something we are going to give a good opportunity to really see its impact rather than dropping it as soon as it fails. The agile principles are something that I have found to be extremely good. Being able to plan on a short term basis and being able to quickly switch out features that are no longer needed for features that are, resulting in systems being developed quickly and to a usable, releasable state. ##Pair ProgrammingAnother skill that I have picked up at BSkyB is pair programming. The concept of pair programming is that two developers work on the same piece of code at the same time. This is done by one person writing the code and the other person reading what they are writing to make sure that the code is of a good standard and to reduce the possibility of bugs. While this may sound like a waste of money, which is what I first thought when I heard about it, it is actually a good system to use as it does work. Many times I have personally experienced moments when writing code, inputting a spelling mistake and then not being able to find it, but having the person who I was pairing with find it, reducing the amount of time bein spent on development. ##Continuous DeploymentContinuous deployment is something that I have always tried to introduce and promote at work, but it has only been recently that I’ve been able to successfully get it working with a production deployable project. On the way to getting continuous deployment working, I have learnt to use cloud solutions, such as Cloud Foundry and Heroku, Puppet, Docker and Jenkins. This has been a great learning experience, as it involves maintaining a strict TDD process, fully automated tasks and making sure that applications can be taken down and started up with little, to no impact on the service, which has provided quite a few technical issues that had to be overcome. ##System DesignsAt university, I had a fair few modules on how to create diagrams, such as entity-relationship diagrams, use case diagrams and flow charts. However, I have never had to use them in a work environment. Whilst in a professional environment, all the system designs have been recorded as architecture diagrams. Whilst this is not something that all organisations will uphold, as some organisations prefer to have a well documented project, at the organisations I have worked for, all that is required is enough documentation to allow newcomers to understand how things work. A major difficulty that I have had to overcome, is the need to have highly available, cross data centre systems. This is something that required us to choose the correct underlying technologies for our software, such as having every application be not be context aware, be clustered and for the storage system to also be clustered (such as Sharding Mongo).","link":"/non-technical-skills/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"},{"title":"Technical Skills","text":"I have recently graduated from the University of Wolverhampton with a first class BSc (Hons) Computer Science degree. I also managed to obtain the Deans Computer Science Student of the Year award for my final year dissertation on mobile contextual learning. ##Java (1.6 - 1.8)Java was the core language that all the modules were based around at university. This has therefore become the main language that I use, both at work and outside of work. At university, I managed to create my own web server, websites with JSPs and servlets, my own compiler for my own language using the GCC compiler as a basis and desktop applications using the Swing framework. When I started working at OpenGI, I learnt how to use the JavaServer Faces framework to create web applications. When the new version of the web application was being made, I also learnt to use the Spring framework. These were both packaged as WAR files and deployed onto Tomcat instances. In other projects at BSkyB, I have also used the Spring framework deployed onto a Tomcat instance, where this has been the base for the majority of projects. But the new projects have been created with the core technologies of Grizzly and Jersey. Outside of deployment, I have used other Java technologies such as the Quartz scheduler, Ehcache and Solr/Lucene. ##Testing FrameworksI first learnt to use automated testing frameworks whilst at university, where we were taught to use jUnit. This has become the basis for the majority of the automated tests that I write, especially at work where we practice TDD. When I started working at BSkyB, I learnt to use Mockito and PowerMock for mocking. Whilst Mockito is an excellent library for mocking methods, it does have some limitations that PowerMock is able to cover, mainly around testing static methods and logic within legacy code that cannot be changed. However, I have also learnt that using PowerMock in a new project is usually the sign of a poor design. For testing RESTful APIs, I have learnt to use REST-assured with jUnit. This gives us the ability to write our API tests as if they were being written in plain English. Another set of testing frameworks that I have learnt whilst working at BSkyB are Selenium, WebDriver and Watir. These are very useful for automated testing website UIs. Cucumber is a great framework for allowing non-technological minded people to fully understand what the tests are trying to do and even allow them to write the acceptance criteria of tasks and business logic. When it comes to non-Java related testing frameworks, I have used Test::Unit for Ruby and qUnit for JavaScript. ##SQL DatabasesIn a professional environment, I have used both MySQL and Oracle SQL databases when requiring a relational database. For my own hobbyist projects, I use MySQL databases when I need to use a relational database. ##NoSQL DatabasesWhen a non-relational database is required, I have used Mongo and Cassandra. I have only used Cassandra on a small project in a professional environment, but I have used Mongo in a lot of highly available and fundamental projects. For relational databases, I have started to use Graph Databases instead of the usual SQL databases such as MySQL and Oracle SQL, I am using Neo4j and even Mongo with TinkerPop (due to financial reasons around Neo4j). ##GWT (2.6.x)I first used GWT as a way to create a quick rich web application for a project at BSkyB. The reason for using GWT instead of JavaScript, was that the team I was in was a predominantly Java team, therefore we wanted to make sure that anyone could pick it up without too much of a learning curve. ##Grails (2.x)The only time that I have used Grails, is for a project when I was still in the software engineering academy. This was an internal web application to make sure that websites conformed to BSkyB’s web standards. ##Ruby (1.x - 2.x)Ruby is a language that I picked up when I was completing the software engineering academy at BSkyB. During that time, we created an internal web application to allow inter-communication between two teams. However, the main use that I have for Ruby now, is for monitoring with Sensu and maintaining a consistent working environment through Puppet. ##AndroidMy knowledge of Android started from my dissertation at university, where I created a simple application to allow to test what the benefits were of mobile contextual learning, rather than just reading information. Since then, it has become a series of hobby projects, mainly as little helpers for my phone. The only application that I have published to the Google Play store so far is ‘Silent Metting’. All the application does is read all the events from the calendar that are set to ‘busy’ and mute/un-mute the phone during that time period. It can also be set to mute for a period of time before the events and carry on being muted for a period of time after the event. I created this application as my dad would have a lot of meetings and would forget to un-mute his phone afterwards, therefore missing calls. ##Python (2.x - 3.x)As with most languages that I use, this started off as part of some hobby projects, and have then been used for more useful projects at work. I have created quite a few personal applications in Python, mainly with Flask. As for its use at work, it has been mainly used for automating jobs, so therefore fairly simple and using fairly basic logic. ##PHP (5.x)PHP was the first language in which I learnt to create a dynamic website. Once again, this was a module at university, which gave me a good basis for learning the quirks of web development. I also learnt to use my first framework, Zend. Whilst I have never used PHP in a professional environment, I have used it a lot whilst outside of university due to the cheap hosting that is PHP only. My mine project has been my own basic CMS, BritIntel.co.uk. Unfortunately, I have not found the time to update it in quite a while and when I last updated the site, I also change hosting, where I regrettably lost a lot of my articles. ##JavaScriptI am fairly new to Node.js, only hearing about it when I started work at BSkyB. However, I have learnt the system, as it is just JavaScript with some extra features, as well as learning to develop using the Express framework, with the inclusion of the Jade template engine. This site has been created using these technologies as a mini project and to save on resources, but being dynamic enough that I can update it easily. ##HTML/CSSWhilst knowing HTML and CSS isn’t something to brag about, it is worth mentioning that I have a very good understanding of both technologies and have a passion for making websites that are accessible to everyone, no matter what their disability may be. This is something that I have been very forward with at work, as I believe if a customer is funding our work, whether through advertisements or through some form of subscription, they deserve to have a really good experience and want to come back again and again. ##C/C++At university, I managed to break away from the core modules based on Java and PHP, where I learnt how to program in C and then C++. I managed to learn a lot about how programming is like on a lower level and how higher level languages work, that would not have been possible if I had not taken the module. Outside of university, I have only created one or two small applications in C/C++, more to get an understanding of QT/GTK+. Whilst I would not class myself as an experienced or well versed programmer in C/C++, I can at least say that I understand the language and that I can competently create an application in C/C++. ##Visual Basic 6Visual Basic was the very first language that I learnt during my A-levels. Whilst this is not a language that I have used since then, but it taught me the basics of computer programming.","link":"/technical-skills/index.html"}],"posts":[{"title":"Eclipse vs IntelliJ","text":"For my first real post, I thought I’d take a look at two IDEs that I keep going in between. When I first started to learn to code, I started with Eclipse, as I’m sure a lot of other people did. I then had a brief stint with Netbeans, but that was short lived. Then when I joined Sky, I was introduced to IntelliJ. This was a new revelation to me as it was something worth replacing Eclipse with. But a few colleagues and I have started having some issues with IntelliJ, so I’ve decided to give Eclipse another go. OverviewSo starting with Eclipse. It actually has quite a lot going for it. First of all, it’s fully open source, which is something that I always like to see in the software that I use. It’s also amazingly customizable, with every part of it able to be moved around and every feature can be tweaked (even to the extent that it behaves like IntelliJ). Finally, it is extremely popular, which has resulted in an abundance of extensions, causing Eclipse to create a marketplace! Now with the contender, IntelliJ. IntelliJ comes in two flavours, ‘Community Edition’ and ‘Ultimate’. The first is, like Eclipse, open source, but the latter is proprietary. It hasn’t always been open source, I first recall seeing it being open source when Google decided to base their new Android Studio on IntelliJ. Whereas Eclipse seems to be popular everywhere, in my experience, IntelliJ is only popular among businesses, but that could all change because of Google’s endorsement. But the main thing that I think makes IntelliJ a real winner, as its name suggests, is that it is genuinely intelligent, far beyond any other IDE. CostThis is a fairly easy category to compare them with. Eclipse has a very broad range of extensions and features, meaning that no matter what you are doing, it is a suitable tool for any project and at a grand financial total of nothing (unless you wish to donate). IntelliJ however, is only free for the ‘Community Edition’ and is limited to non-web technology. So if your project is all about the net, sorry, but you’re going to have to fork out the full amount for ‘Ultimate’ (or at least if you want it for more than 30 days, without constantly uninstalling it and re-installing it). Computer ResourcesI fully understand that mileage in this section varies from user to user, project to project and machine to machine, but I have noticed a clear difference between the two. For a start, memory usage. This is all about IntelliJ’s double edged sword, IntelliSense. The reason why IntelliJ is so intelligent and so great as an IDE, is that it indexes everything and I do mean everything. Of course, this takes up a lot of memory to hold all that information, whereas Eclipse does none of this (not that it isn’t useful, just no where near the same level). Eclipse however, seems to be a lot more sluggish and CPU intensive (thought I did have an issue with IntelliJ, of all days, where it was using over 200% of my CPU constantly doing nothing). Fortunately with IntelliJ a quick restart fixes most problems, which is not an answer for Eclipse. So really, if you want a speed IDE and you’re not limited on memory, I would recommend IntelliJ, but if you are low on memory, a lot is really missed without IntelliSense going all guns blazing. Development SpeedAt the end of the day, what does it matter if your IDE is fast if it slows you down more whilst you are coding? What I have noticed is that Eclipse is very much about getting the job done. It takes an age to configure everything at the start, but usually when it’s done, it stays true and keeps on trucking. Unfortunately, it has the down fall for me at work, where we all of our preferences outside of work, so we use Editor Config to make sure that we all conform to an agreed format, however Eclipse does not have full support of this (there is a plugin on github, but it’s not feature complete). The real topping to the cake is that now with Android Studio, there is no support for Gradle with Android development within Eclipse, which is a real pain because I can’t stand not having a simple dependency management system. IntelliJ on the other hand provides brilliant autocomplete (Eclipse does a good job, but not as good) which speeds up my refactoring ten-fold. But the thing I really miss from IntelliJ when I have to start using Eclipse is, as mentioned, that it just works out of the box. Install and you’re away. One thing I noticed today whilst trying to use Eclipse at work, was that there isn’t an easy way to navigate to beans and overriding methods. With IntelliJ, all that is required is just to click an icon in the side section and it takes you straight there. No searching, no racking your brain which child classes override the method and which don’t. IssuesI’ll start with Eclipse. Honestly, I can’t think of any issues with it. It’s not the quickest, it’s not the simplest and it’s not the most intelligent, but it is reliable and it does do everything and for such a fantastic price! Now onto IntelliJ. I don’t know if it’s just me being more lenient with Eclipse because it’s free, or whether I genuinely think IntelliJ is more buggy, but I keep running into issues. Everyday I seem to go through the process of invalidating the cache and restarting it, all because IntelliJ fails to show that I have something wrong and it won’t compile, or it says that I have a problem and when I run it through the command line via Maven or Gradle, it’s perfectly fine. Secondly, it keeps crashing and not just on my machine. Everyone at work seems to have the same problem where it will just randomly crash when searching. Fortunately, I don’t pay for IntelliJ as the company does, but is this really something that is acceptable for a paid product? Especially as it’s not cheap either! ConclusionI originally decided to write this post as a nice way for me to compare the two and decide which I prefer. But really, I still can’t decide. I started writing this and realising that I really do love IntelliJ, but then I realised how much I get annoyed with it not working. It’s almost enough for me to keep using Eclipse. Perhaps I will just keep switching until either IntelliJ stops breaking, or Eclipse creates its own IntelliSense. As advice for you guys, if you don’t want to spend money and need web technology support, if IntelliJ just won’t play ball on your setup or if only Eclipse supports the technology that you use, then of course, go with Eclipse. But if IntelliJ is stable, if you can live with invalidating the cache and restarting IntelliJ every so often, if you have more memory than a machine really should, if you don’t mind spending money or if you don’t want to spend money and you don’t use any web technologies, then go with IntelliJ. For me, I’m going to switch constantly between Eclipse and IntelliJ until one gives up on me.","link":"/2015/06/22/Eclipse-vs-IntelliJ/"},{"title":"DevOps in Finance","text":"I have only been in the finance industry for about a year now, specifically an investment firm, but I’ve learnt a lot. Before joining, I heard a lot of the horror stories of the “requirement” to stay until 10 at night and never being able to use any of the latest tools, but I can categorically state, that is wrong. Or at least it is wrong for me. However, that doesn’t mean what I have learnt is good either. What I have learnt is that finance needs, ironically, investment. Yes, they have some amazing tools for their time and I really do mean that. The problem is their lack of forethought around the 2008 financial crisis, whereby whole teams were let go and systems were left to die. This is now leading to a massive surge of “DevOps” within all of the financial firms. What do they mean by DevOps?As anyone who has been “doing DevOps” will know, it is a very nondescript term. Yes, it is always categorised as development + operations, but it is so broad that it never really boils down to anything tangible. But in the banks, there is a distinct feel that to the people leading it, it’s a buzz word that they need to add to their repertoire, otherwise they won’t be able to hire anyone. Do they understand DevOps? No. Do they understand the benefits? Yes. They know it will give them cost savings, higher efficiencies and happier employees and that’s what they will get. What are they doing to get there?On Monday, I went to the Credit Suisse DevOps Expo in London, hosted in their shiny office building in Canary Wharf, where in all honesty, I learnt next to nothing. Not to say the talks were boring or that they weren’t correct, just I’d heard it all before. Also, they had some good speakers there. I think Martin Woodward from Microsoft DevOps is a fantastic speaker and what they are doing in Microsoft is fantastic, but I’d heard his presentation only a few months ago. But this is a good sign, this means that what these banks are doing is bringing in the right people, talking about the right stuff. So obviously, the training is good! Secondly, internally (as I do not work at Credit Suisse), we are having our own training sessions and the idea of DevOps is being pushed upon us along with other closely related ideas, such as Agile. This is slowly allowing for some actual innovation and ultimately some actual change and improvements, rather than the usual bolting on terrible “temporary” hacks which are still going to be there in production 10 years later. Finally, they are providing nice new offices where we aren’t being packed in like chickens in a battery farm, whereby I literally mean that you had enough space for a keyboard and 2 monitors where your colleague’s monitors on either side were almost touching yours. They are trying to separate us from the usual requirements of dressing up as if we are talking to clients, when everyone knows that is never the case, and in my opinion, most clients would probably like to see the tech people in charge of their investments and money as being tech people, not business people. All in all, do I believe that the finance industry is going in the right direction? Yes, not by choice or by will, but by necessity for their outlooks are bleak without these changes. However, my real concern is that they are going too slowly. There is too much resistance to change, too much middle management and oddly created roles such as “SMEs” (subject matter experts) and “proxy product owners” purely for the benefit of not addressing the issues of career development in technology and how that would relate to bonuses. These firms have so much money that it will take a while for them to fail, but they will unless they address the real issues.","link":"/2019/06/12/DevOps-in-Finance/"},{"title":"Hello World!","text":"Hello world! I’ve finally decided that I should start up my own blog, so here is a start! Not much is going on here and as you can see, it’s very basic and I will be updating it so that it can become a real blog!","link":"/2015/06/21/Hello-World/"},{"title":"The EU and why I&#39;m not sure","text":"As I’m sure everyone in the western world is aware, Britain is looking to leave the EU. This isn’t meant to be a post to persuade people either way, it’s just some thoughts that I have had which may be useful to some off you other people. I would also like to point out (as the title of this post suggests) that I am actually undecided on this matter. Trade DealsThis is something that I (naively) wasn’t taking into account, but in fact trade between nations doesn’t require a trade deal at all. All we require is goods and money. So should we leave the EU, we’re not going to lose trade (even if you ignore the 2 year leave clause), but what could happen is that we will have to start to pay to export goods to other countries (but also charge import tax for their stuff). Of course, leaving the EU will mean we will lose pretty much all of our trade deals with other countries, but we’re not going to see the collapse of trade that everyone keeps going on about. But there is one very good point I would like to make though, not all trade deals are good. I urge you to search for TTIP, the latest attempt at a trade deal between the EU and US. I have yet to see a positive post on this agreement from any source. Even the German people are protesting about it.[1] For those that are too lazy to search, here is what the independent says about it. EU InterferenceEU interference is something that I think is a very pressing concern for many people, even outside of the UK.[2] Of course, on the other hand, there are the benefits of EU interference, such as better labour laws, cultural incentives and agriculture incentives. But any interference is obviously going to be decisive. French agriculture has been floating on incentives for so long, people do question why is Britain paying for French farms? Not to say the French aren’t paying for their farms, or that they aren’t paying for ours, because they are, but it should be seen as people saying it shouldn’t be happening either way. It is worth mentioning that all EU laws aren’t legally binding, they are agreements that all members agree to create laws on, so if we do leave, these laws still exist, it’s just that they can’t be removed whilst we are in the EU. ImmigrationBy far, this is the biggest thing debated every single time the EU is brought up in British politics, but as someone who works with many foreign nationals (EU and non-EU), immigration is good. Would British people do the job just as well or better? I don’t see why not, but that’s not my point here. On a personal level, I really enjoy being challenged about my views on things. If you asked me, for the British economy as a whole, is immigration good? I can’t say it is, I can’t say it isn’t either, but the facts are out there showing that with the EU migrants, they do help the economy more than they hinder it. To the more educated people, this is not the question surrounding immigration, but rather that if we did leave the EU, the better skilled people will still come, just the unskilled won’t, therefore boosting the UK economy even more. The Labour ConundrumAs a usual Labour voter, I have been displeased with the current leaders. Ed Miliband was a complete joke of a leader and I can almost guarantee that had David Miliband been the leader, we would have a Labour party in power. The current leader, Jeremy Corbyn is an interesting character, who I think is a great shake up to the current political situation. Do I think he is incompetent? Yes, I would like to think that our PM could at least fill in his tax return on time, but I like the fact that someone who is changing things, trying to bring the people into politics, is there. So what is this conundrum? The conundrum is about what the EU enforces. On the one hand, the EU laws state that companies have certain obligations to fulfil when it comes to employee working conditions, which you can’t deny are amazing and something we need. As mentioned earlier, these are actually UK laws, not EU laws. So far so good for a socialist supporter, but here is the problem, especially for Corbyn’s supporters. Nationalisation is impossible under EU laws. As long as we are in the EU, we cannot have a nationalised rail service as all industries cannot have monopolies (of which a nationalised system would be one). For those that are not from the UK, rail fares are very expensive. If a person wants to travel a short(ish) distance on their own, it’s usually the same cost to travel by car, but if you want to travel a long distance, it’s usually double the cost of travelling by car. If we start talking about multiple people travelling, you’re just increasing train fares, but the car fares are the same. So anything to bring the prices down is great for UK citizens and even better for the environment, but I’m too young to know what a nationalised rail service is like, I can only go by what I’m told. What I’ve been told is that it was starved of funds due to politicalisation of the service to win points with voters and this is what caused the problem of needing higher fares now. So for some Labour supporters, this is not an issue, but for others, this is something that is really important and puts them in a sticky situation. What will the EU look like in 10 years time?No one would disagree that staying in the EU would be the best thing to do in the short term as the market likes stability, investors like stability and investors like the idea of having free trade with the rest of the EU (or at least the bigger economies in the EU). But what about in 10 years time? There is a growing movement against the EU bloc from many countries, including France, Germany and smaller countries such as Denmark. Earlier on in the ‘Brexit’ discussion, Barclays weighed up with an interesting outcome being that the UK would be better off if the did leave because the EU would collapse.[3] The EU would have to change dramatically to stop this current growing movement of discontent, but that’s not to say it couldn’t or won’t. Maybe this is the referendum to show to the EU that it really does need to change and maybe it will. But let’s stop being so doom and gloom with the EU breaking up and imagine a world where the EU didn’t care that the UK left. Would new countries want to join? Turkey is currently wanting to join the EU, but why would the EU want them in? Free trade with Turkey won’t give much to most EU countries, but would most likely cause a greater drain on finances from the EU. Maybe the EU is trying to do a great thing and help Turkey to improve it’s economy and stability and make their citizens lives better. Call me a cynic, but I don’t believe this for a second. You don’t have to look far to what the EU and it’s greatest advocate, Germany, thinks of these smaller economies. Take the Greek crisis for example, if the EU and Germany truly cared about the Greek people, they would have been less strict with the austerity and provided more money. But the reality is this, Germany has lent too much money to Greece to want it to default on its debts and forcing the austerity was just a way to make sure they got their money back as soon as possible. Also, the money they lent to Greece was only so they could by German products, therefore meaning Germany got it back anyway in trade, then the loan is re-paid with interest, therefore getting even more money from a struggling smaller country. So it does make you question the EUs motive in getting Turkey into the EU. But the EU isn’t Germany I hear you screaming, no it’s not, but it is heavily influenced by it’s 2 largest fully integrated economies, France and Germany, of which, I’m not sure where France stands on these things, but considering they are a lot more socialist that Germany, I would expect them to actually want to help the people rather than the companies. Another more vital question and something that a lot of ‘out’ supporters are worried about is what will the EU become in terms of tighter integration. Quite frankly, the world is becoming smaller and borders are disappearing with more free trade agreements all around the world. Nobody knows what will happen with the EU, but my personal opinion is that we should either integrate more with Europe or get out now, there is no point being in the middle, not really getting what we want or helping the EU. This was a lot of nothingI know, I know, there has been no distinct conclusion to this piece and neither was I aiming to, but rather to put my thoughts down so I can better weigh up what this referendum really means. There is no right or wrong answer and I really really hate the fact that the ‘Better In’ campaigners never seem to explain their point of view beyond what is basically scare-mongering, forcing me to not understand the benefits of the EU. But whatever your view is, just remember that we will be creating history that no other country has done before, either we will leave the EU, breaking up the largest ever integrated bloc of nations, or we will stay in and will cause the EU to rethink what it is trying to be. The BBC has a good ‘Reality Check’ on the referendum statistics if you don’t want to wade through all the facts either side are giving out and trying to find out whether it is all rubbish or not. References[1] http://www.reuters.com/article/us-trade-protests-germany-idUSKBN0N90LO20150418[2] http://www.bbc.co.uk/news/world-europe-36087022[3] http://www.telegraph.co.uk/business/2016/02/11/brexit-vote-could-turn-uk-into-a-safe-haven-triggering-eu-disint/","link":"/2016/04/24/eu-and-why-im-not-sure/"},{"title":"Remain Voters Need to Think About Their Behaviour","text":"As I’m sure most people have become aware of, the UK has voted to leave the European Union. I actually voted remain as I believe that was the correct decision, but clearly most people thought differently. If you are asking, why would someone who voted remain be writing about the behaviour of remain voters? The answer is simple, I like to think of myself as an open minded, see the benefits in anything, kind of person. It seems like there have been many ignorant (definition for those that are unaware) and offensive remain voters today, just because they were out voted. I know many, many people who voted out, not because it was the safe thing, not because it was the easy choice, but because they believed it was the best in the long term. I believe we would be better in, enjoying the benefits of the European Union until it collapses (which it will no matter what happens over the next few months). Another Referendum PetitionThe petition was so popular that it actually brought down the petition site! I’m not saying that we shouldn’t create petitions for things we believe in, after all, I have signed many and many have been successful. However, it smacks me in the face of a bunch of toddlers throwing their toys out of their push chair because other people have a different view. This is the first time that I can remember that more people have voted for the same thing than not. For example, in the last general election, 36.9% voted for the Conservatives, meaning that 63.1% did NOT want the Conservatives. However, in this referendum, 51.9% voted to leave and only 48.1% voted to remain. Immigration Control is BadThis is a very controversial topic with the remain voters. Controlled immigration is not bad at all, it is actually good for everyone. From Britain’s point of view, we only get the skilled workers that we need (e.g. doctors, nurses, etc.) and not the people we already have the skills for. It also means we can try and break down our 7% unemployment level. From other countries’ point of view, they only lose some of their skilled workers, not all of them. This means that they still have an economy and are not devastated because supposedly “better” countries get all of the good workers (which is what Germany and other larger economy countries are doing). The European is NOT DemocraticIt clearly is NOT a democratic system and not in the way the ‘Vote Leave’ campaigners were saying. Certain countries in the European Union have more of a say than others. Not only that, at the last European elections, the average UK citizen was 1 vote in 875,000 votes for 1 MEP, who was in turn 1 MEP in 751 MEPs. In the last general election, the average UK citizen was 1 vote in 10,000 votes for 1 MP, who was in turn 1 MP in 650. How is this a democracy we want to be part of, where people’s voices are worth less and are even biased? Economic ChangesThen there is the fact that the European Union economies are actually shrinking, so being stuck with them is not beneficial, it’s a hindrance. Whilst part of the European Union, countries are not able to negotiate their own trade agreements with other countries. This means that the UK were unable to have trade agreements with growing economies such as China, India and Brazil. Leave Voters are This is what really drives me mad. There are plenty of remain voters who have no idea what the benefits are of being out of the European Union. Please, do some research on what the benefits are instead of only what the bad things are. Next time you disagree with someone, think, do they actually make sense? Am I actually in the wrong? Just because Nigel Farage is a mad man, doesn’t mean ALL people who are voting the same way are. Blaming PeopleI have seen too many people complaining about the older generations voting to leave and “ruining” this country. However, let’s look at the facts about this. The areas with a younger voting population had a lower turn out. Also, only 67.2% of people in Scotland and 62.9% in Northern Ireland turned up to vote, so the fact they are both upset wanting independent referendums is a joke. If they genuinely cared, they would have voted to remain. We can only look at ourselves for what has happened. Did we campaign enough, did we explain to each other what really are the issues with either leave or remain? I think we got so caught up in both sides scare mongering and mud slinging, that we never stopped to help each other out. As a final note, I was terrified this morning when I saw that the UK had voted to leave the European Union, thinking the economy was going to take a nose dive. No surprise that it did, but it’s recovered to higher than it was at the start of the week. To put it into perspective with the rest of the world’s markets, the FTSE100 (UK) fell 3.15%, the DAX (Germany) fell 6.82%, the Cac40 (France) fell 8.04%, the Dow Jones (US) fell 3.18% and the Nikkei225 (Japan) fell 7.92%. So really, we didn’t do too badly on that front. But we are where we are and we have to take things forward. Make Britain a shining beacon of love, harmony and communication, where people of all ages and from all over the world can come, work, enjoy and support each other. So please, less hate for those that happen to disagree with you and more co-operation in making things better for all.","link":"/2016/06/24/Remain-Voters-Need-to-Think-About-Their-Behaviour/"}],"tags":[{"name":"Eclipse","slug":"Eclipse","link":"/tags/Eclipse/"},{"name":"Intellij","slug":"Intellij","link":"/tags/Intellij/"},{"name":"DevOps","slug":"DevOps","link":"/tags/DevOps/"},{"name":"Finance","slug":"Finance","link":"/tags/Finance/"},{"name":"Welcome","slug":"Welcome","link":"/tags/Welcome/"},{"name":"EU","slug":"EU","link":"/tags/EU/"},{"name":"Brexit","slug":"Brexit","link":"/tags/Brexit/"},{"name":"Remain","slug":"Remain","link":"/tags/Remain/"}],"categories":[{"name":"Development","slug":"Development","link":"/categories/Development/"},{"name":"Miscellaneous","slug":"Miscellaneous","link":"/categories/Miscellaneous/"}]}